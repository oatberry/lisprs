(define give (lambda (nick thing) (cat nick ": " thing)))
(define GREY "15")
(define add1 (lambda (n) (+ n 1)))
(define LIGHTCYAN "11")
(define LIGHTRED "04")
(define ugc (lambda () (cat "good (ugt) COFFEE to all from " SENT_NICK "!")))
(define link "https://upload.wikimedia.org/wikipedia/en/3/39/Wakerlink.jpg")
(define halfwitrpg (lambda () (cat "muh " (rand "moose" "xcb" "dmenu" "posix sh" "desk" "wood" "keyboard" "xlib" "plan9" "rob pike" "golang" "potato leaf" "heart belongs to voidead" "maple syrup" "eh?" "ubqt" "9p"))))
(define RED "05")
(define filter (lambda (f seq) (if (null? seq) (list) (if (f (car seq)) (cons (car seq) (filter f (cdr seq))) (filter f (cdr seq))))))
(define floor (lambda (n) (- n (% n 1))))
(define number? (lambda (n) (eq? "Number" (type n))))
(define list? (lambda (l) (= "List" (type l))))
(define Uno "uno")
(define append (lambda (a b) (append a b)))
(define ugn (lambda () (cat "good (ugt) night to all from " SENT_NICK "!")))
(define ‚ç≥ (lambda (n) (if (= n 1) (list 1) (append (‚ç≥ (sub1 n)) (list n)))))
(define <3 "04üéî ")
(define RESET "")
(define foldr1 (lambda (f seq) (foldr f (car seq) (cdr seq))))
(define SENT_NICK "oats")
(define ‚àä (lambda (val seq) (cond ((null? seq) #f) ((= val (car seq)) #t) (else (member-of? val (cdr seq))))))
(define LIGHTGREEN "09")
(define fact (lambda (f n) (if (zero? n) 1 (* n (f (sub1 n))))))
(define apply (lambda (fn seq) (eval (cons fn (map (lambda (x) (list 'quote x)) seq)))))
(define Y (lambda (func) ((lambda (x) (func x x)) (lambda (x) (func x x)))))
(define wb2 "https://upload.wikimedia.org/wikipedia/commons/thumb/d/d0/The_W_B_logo.svg/240px-The_W_B_logo.svg.png")
(define str? (lambda (s) (= "Str" (type s))))
(define achillion? "butts")
(define nand (lambda (a b) (not (and a b))))
(define nor (lambda (a b) (not (or a b))))
(define uppercase (lambda (a) (uppercase a)))
(define c2f (lambda (c) (cat c "¬∞C = " (+ 32 (* c 1.8)) "¬∞F")))
(define √ó (lambda (. args) (apply '* args)))
(define type (lambda (a) (type a)))
(define halosghost? "is very cool")
(define i (lambda (n) (if (= n 1) (list 1) (append (i (sub1 n)) (list n)))))
(define ‚àß (lambda (. args) (foldl1 and args)))
(define take (lambda (n seq) (cond ((<= n 0) (list)) ((null? seq) (list)) (else (cons (car seq) (take (sub1 n) (cdr seq)))))))
(define newPoint (lambda (x y) (list x y)))
(define fb (lambda (upto fizz buzz) (map (lambda (n) (cond ((zero? (% n (* fizz buzz))) "FizzBuzz") ((zero? (% n buzz)) "Buzz") ((zero? (% n fizz)) "Fizz") (else n))) (‚ç≥ upto))))
(define halosghost "üêº")
(define min (lambda (a b) (if (< a b) a b)))
(define + (lambda (a b) (+ a b)))
(define k2m (lambda (k) (cat k " km ~= " (floorplace (/ k 1.609) 100) " mi")))
(define ! (lambda (n) (foldl1 √ó (‚ç≥ n))))
(define sub1 (lambda (n) (- n 1)))
(define factorial (lambda (n) (if (one? n) 1 (* n (factorial (sub1 n))))))
(define alad? "bloat")
(define foldr (lambda (f init seq) (if (null? seq) init (f (car seq) (foldr f init (cdr seq))))))
(define wb "we're glad to have you back, friend :)")
(define maximum (lambda (seq) (cond ((null? seq) nil) ((one? (length seq)) (car seq)) (else (max (car seq) (maximum (cdr seq)))))))
(define cdr (lambda (seq) (cdr seq)))
(define shrug "ü§∑")
(define / (lambda (a b) (/ a b)))
(define enumerate (lambda (seq) (zip (‚ç≥ (length seq)) seq)))
(define :P (lambda () (cat "/me blows a raspberry at " SENT_NICK)))
(define WHITE "00")
(define ‚äï (lambda (. args) (foldl1 xor args)))
(define scanl (lambda (f acc seq) (if (null? seq) (list) (let ((new_elem (f acc (car seq)))) (cons new_elem (scanl f new_elem (cdr seq)))))))
(define uge (lambda () (cat "good (ugt) evening to all from " SENT_NICK "!")))
(define f2c (lambda (f) (cat f "¬∞F = " (/ (- f 32) 1.8) "¬∞C")))
(define cons (lambda (a b) (cons a b)))
(define œÜ 6.283185307179586)
(define access (lambda (type val field) (if (and (s-eq? type val) (member-of? field type)) (list-ref val (index-of field type)) nil)))
(define bool? (lambda (b) (= "Bool" (type b))))
(define or (lambda (a b) (or a b)))
(define xnor (lambda (a b) (not (xor a b))))
(define LIGHTMAGENTA "13")
(define max (lambda (a b) (if (> a b) a b)))
(define BLACK "01")
(define √∑ (lambda (a b) (/ a b)))
(define symbol? (lambda (s) (= "Symbol" (type s))))
(define ping "pong")
(define scanl1 (lambda (f seq) (scanl f (car seq) (cdr seq))))
(define hi "yo")
(define car (lambda (seq) (car seq)))
(define BLUE "02")
(define xor (lambda (a b) (or (and a (not b)) (and b (not a)))))
(define foldl1 (lambda (f seq) (foldl f (car seq) (cdr seq))))
(define ‚à® (lambda (. args) (foldl1 or args)))
(define CYAN "10")
(define repeat (lambda (n val) (if (zero? n) (list) (cons val (repeat (sub1 n) val)))))
(define quicksort (lambda (seq) (if (null? seq) (list) (let ((lesser (quicksort (filter (lambda (n) (<= n (car seq))) (cdr seq)))) (greater (quicksort (filter (lambda (n) (> n (car seq))) (cdr seq))))) (foldl1 append (list lesser (list (car seq)) greater))))))
(define zero? (lambda (n) (= 0 n)))
(define list (lambda (. args) args))
(define member-of? (lambda (val seq) (cond ((null? seq) #f) ((= val (car seq)) #t) (else (member-of? val (cdr seq))))))
(define GREEN "03")
(define square (lambda (a) (* a a)))
(define zip (lambda (seq1 seq2) (if (or (null? seq) (null? seq2)) (list) (cons (list (car seq1) (car seq2)) (zip (cdr seq1) (cdr seq2))))))
(define night (lambda (n) (cat n ": " SENT_NICK " wishes you sweet rest!")))
(define GRAY "15")
(define upn "https://www.instagram.com/p/_u2Q9Qry_c/")
(define uga (lambda () (cat "good (ugt) afternoon to all from " SENT_NICK "!")))
(define ugm (lambda () (cat "good (ugt) morning to all from " SENT_NICK "!")))
(define LIGHTBLUE "12")
(define ‚ç± (lambda (. args) (foldl1 nor args)))
(define s-eq? (lambda (a b) (cond ((and (list? a) (list? b)) (if (= (length a) (length b)) (foldl1 and (map (lambda (seq) (s-eq? (car seq) (list-ref seq 1))) (zip a b))) #f)) ((nor (list? a) (list? b)) #t) (else #f))))
(define map (lambda (f seq) (if (null? seq) (list) (cons (f (car seq)) (map f (cdr seq))))))
(define * (lambda (a b) (* a b)))
(define zipwith (lambda (f a b) (if (or (null? a) (null? b)) (list) (cons (f (car a) (car b)) (zipwith f (cdr a) (cdr b))))))
(define achillion2? "dongs")
(define begin-world-domination (lambda () success))
(define Œπ (lambda (n) (if (= n 1) (list 1) (append (Œπ (sub1 n)) (list n)))))
(define iscool? (lambda (nick) (cat nick " is very cool.")))
(define - (lambda (a b) (- a b)))
(define MAGENTA "06")
(define hug (lambda (nick) (cat "/me hugs a " nick)))
(define one? (lambda (n) (= 1 n)))
(define floorplace (lambda (n place) (- n (% n (/ 1 place)))))
(define lowercase (lambda (a) (lowercase a)))
(define foo "bar")
(define foldl (lambda (f init seq) (if (null? seq) init (foldl f (f init (car seq)) (cdr seq)))))
(define ‚ç≤ (lambda (. args) (foldl1 nand args)))
(define proc? (lambda (f) (= "Proc" (type f))))
(define and (lambda (a b) (and a b)))
(define moar (lambda (a) (cat "MOOOOOAAAAARRR " (uppercase a) "!!!!!!")))
(define compose (lambda (f1 f2) (lambda (a) (f1 (f2 a)))))
(define reverse (lambda (seq) (if (null? seq) (list) (append (reverse (cdr seq)) (list (car seq))))))
(define hgrpg (lambda () (rand (cat "I'm " (rand "bored" "bored" "bored" "tired" "tired" "lazy" "lazy" "durnk")) (cat "I'm a " (rand "bored" "lazy" "hungry" "tired" "silleh" "durnk") " panda") (cat "muh " (rand "boredoms" "boredoms" "lazy" "hungry" "tired" "silleh" "feels")))))
(define eq? (lambda (a b) (if (and (list? a) (list? b)) (cond ((and (null? a) (null? b)) #t) ((xor (null? a) (null? b)) #f) (#t (and (= (car a) (car b)) (eq? (cdr a) (cdr b))))) (= a b))))
(define quote (lambda (a) (quote a)))
(define null? (lambda (seq) (zero? (length seq))))
(define index-of (lambda (val seq) (let ((matches (filter (lambda (pair) (= val (list-ref pair 2))) (enumerate seq)))) (if (null? matches) nil (car (car matches))))))
(define abs (lambda (n) (if (>= n 0) n (- 0 n))))
(define YELLOW "08")
(define eat (lambda (a) (cat "/me " (rand "chews" "gobbles" "devours" "eats" "consumes" "ingests" "partakes of" "munches" "chomps" "chows down on") " a " a)))
(define BROWN "07")
(define nil? (lambda (n) (= "Nil" (type n))))
